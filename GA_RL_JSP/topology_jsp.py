# -*- coding: utf-8 -*-
# @Time : 2021/10/4 15:33
# @Author : hhq
# @File : topology_jsp.py
import copy
import datetime
import numpy as np
import random
import re
import matplotlib.pyplot as plt
from matplotlib import rcParams


# jobs = 25  # 工件数
# machines = 10  # 机器数
# t_table = np.random.randint(1, 100, (jobs, machines))  # 加工时间列表
# m_table = np.random.randint(1, 11, (jobs, machines))
# 加工位置初始化，每个工序一个位置
# m_table = []
# m = list(range(1, machines + 1))
# for i in range(jobs):
#     m_table.append(random.shuffle(m))
# m_table = np.random.randint(1, machines+1, (jobs, machines))
# jobs = 6  # 工件数
# machines = 6  # 机器数
# t_table = [[1,3,6,7,3,6],[8,5,10,10,10,4],[5,4,8,9,1,7],[5,5,5,3,8,9],[9,3,5,4,3,1],[3,3,9,10,4,1]]
# m_table=[[3,1,2,4,6,5],[2,3,5,6,1,4],[3,4,6,1,2,5],[2,1,3,4,5,6],[3,2,5,6,1,4],[2,4,6,1,5,3]]
jobs = 10  # 工件数
machines = 10  # 机器数
# 1056 [['c8_1_3', [0.0, 31.0]], ['c5_1_3', [31.0, 45.0]], ['c6_1_3', [45.0, 129.0]], ['c2_1_1', [0.0, 43.0]], ['c7_1_2', [0.0, 46.0]], ['c9_1_1', [43.0, 119.0]], ['c10_1_2', [46.0, 131.0]], ['c5_2_1', [119.0, 125.0]], ['c1_1_1', [125.0, 154.0]], ['c7_2_1', [154.0, 191.0]], ['c2_2_3', [129.0, 219.0]], ['c4_1_2', [131.0, 212.0]], ['c7_3_4', [191.0, 252.0]], ['c10_2_1', [191.0, 204.0]], ['c2_3_5', [219.0, 294.0]], ['c8_2_1', [204.0, 290.0]], ['c9_2_2', [212.0, 281.0]], ['c9_3_4', [281.0, 357.0]], ['c5_3_2', [281.0, 303.0]], ['c4_2_3', [219.0, 314.0]], ['c4_3_1', [314.0, 385.0]], ['c5_4_6', [303.0, 364.0]], ['c10_3_3', [314.0, 375.0]], ['c6_2_2', [303.0, 305.0]], ['c9_4_6', [364.0, 415.0]], ['c10_4_7', [375.0, 382.0]], ['c4_4_5', [385.0, 484.0]], ['c4_5_7', [484.0, 493.0]], ['c5_5_4', [364.0, 390.0]], ['c9_5_3', [415.0, 500.0]], ['c10_5_9', [382.0, 446.0]], ['c2_4_10', [294.0, 305.0]], ['c8_3_2', [305.0, 351.0]], ['c5_6_5', [484.0, 553.0]], ['c7_4_3', [500.0, 513.0]], ['c7_5_7', [513.0, 545.0]], ['c3_1_2', [351.0, 442.0]], ['c6_3_6', [415.0, 467.0]], ['c9_6_10', [500.0, 511.0]], ['c8_4_6', [467.0, 541.0]], ['c2_5_4', [390.0, 459.0]], ['c2_6_2', [459.0, 487.0]], ['c9_7_7', [545.0, 585.0]], ['c8_5_5', [553.0, 585.0]], ['c6_4_4', [467.0, 562.0]], ['c4_6_9', [493.0, 545.0]], ['c8_6_7', [585.0, 673.0]], ['c1_2_2', [487.0, 565.0]], ['c1_3_3', [565.0, 574.0]], ['c4_7_8', [545.0, 630.0]], ['c10_6_10', [511.0, 587.0]], ['c1_4_4', [574.0, 610.0]], ['c6_5_9', [562.0, 610.0]], ['c3_2_1', [442.0, 527.0]], ['c2_7_7', [673.0, 719.0]], ['c1_5_5', [610.0, 659.0]], ['c9_8_8', [630.0, 719.0]], ['c6_6_10', [610.0, 682.0]], ['c8_7_9', [673.0, 692.0]], ['c3_3_4', [610.0, 649.0]], ['c9_9_5', [719.0, 745.0]], ['c10_7_6', [587.0, 634.0]], ['c7_6_6', [634.0, 655.0]], ['c5_7_9', [692.0, 713.0]], ['c3_4_3', [649.0, 723.0]], ['c7_7_10', [682.0, 714.0]], ['c3_5_9', [723.0, 813.0]], ['c4_8_4', [649.0, 747.0]], ['c6_7_1', [682.0, 729.0]], ['c7_8_9', [813.0, 902.0]], ['c10_8_4', [747.0, 799.0]], ['c1_6_6', [659.0, 670.0]], ['c1_7_7', [719.0, 781.0]], ['c5_8_8', [719.0, 768.0]], ['c6_8_7', [781.0, 846.0]], ['c2_8_6', [719.0, 765.0]], ['c6_9_5', [846.0, 852.0]], ['c10_9_5', [852.0, 942.0]], ['c2_9_8', [768.0, 840.0]], ['c3_6_6', [813.0, 823.0]], ['c3_7_8', [840.0, 852.0]], ['c1_8_8', [852.0, 908.0]], ['c5_9_10', [768.0, 840.0]], ['c8_8_10', [840.0, 888.0]], ['c7_9_8', [908.0, 938.0]], ['c1_9_9', [908.0, 952.0]], ['c7_10_5', [942.0, 997.0]], ['c8_9_8', [938.0, 974.0]], ['c6_10_8', [974.0, 999.0]], ['c9_10_9', [952.0, 1026.0]], ['c4_9_10', [888.0, 910.0]], ['c3_8_7', [852.0, 941.0]], ['c2_10_9', [1026.0, 1056.0]], ['c3_9_10', [941.0, 986.0]], ['c10_10_8', [999.0, 1044.0]], ['c8_10_4', [974.0, 1053.0]], ['c4_10_6', [910.0, 953.0]], ['c1_10_10', [986.0, 1007.0]], ['c3_10_5', [997.0, 1030.0]], ['c5_10_7', [941.0, 994.0]]]
t_table = [[29,78,9,36,49,11,62,56,44,21],[43,90,75,11,69,28,46,46,72,30],[91,85,39,74,90,10,12,89,45,33],
           [81,95,71,99,9,52,85,98,22,43],[14,6,22,61,26,69,21,49,72,53],[84,2,52,95,48,72,47,65,6,25],
           [46,37,61,13,32,21,32,89,30,55],[31,86,46,74,32,88,19,48,36,79],[76,69,76,51,85,11,40,89,26,74],
           [85,13,61,7,64,76,47,52,90,45]]
m_table = [[1,2,3,4,5,6,7,8,9,10],[1,3,5,10,4,2,7,6,8,9],[2,1,4,3,9,6,8,7,10,5],[2,3,1,5,7,9,8,4,10,6],
           [3,1,2,6,4,5,9,8,10,7],[3,2,6,4,9,10,1,7,5,8],[2,1,4,3,7,6,10,9,8,5],[3,1,2,6,5,7,9,10,8,4],
           [1,2,4,6, 3, 10,7,8,5,9],[2,1,3,7,9,10,6,4,5,8]]
# jobs = 20
# machines = 5
# # 1331[['c19_1_2', [0.0, 69.0]], ['c18_1_1', [0.0, 86.0]], ['c20_1_1', [86.0, 99.0]], ['c16_1_2', [69.0, 71.0]], ['c16_2_1', [99.0, 194.0]], ['c10_1_2', [71.0, 156.0]], ['c12_1_3', [0.0, 90.0]], ['c19_2_3', [90.0, 141.0]], ['c17_1_1', [194.0, 231.0]], ['c6_1_3', [141.0, 225.0]], ['c8_1_3', [225.0, 256.0]], ['c15_1_1', [231.0, 237.0]], ['c10_2_3', [256.0, 317.0]], ['c9_1_1', [237.0, 313.0]], ['c11_1_2', [156.0, 234.0]], ['c5_1_3', [317.0, 331.0]], ['c13_1_1', [313.0, 398.0]], ['c19_3_1', [398.0, 409.0]], ['c18_2_2', [234.0, 308.0]], ['c1_1_1', [409.0, 438.0]], ['c6_2_2', [308.0, 360.0]], ['c10_3_1', [438.0, 502.0]], ['c15_2_2', [360.0, 421.0]], ['c5_2_2', [421.0, 443.0]], ['c1_2_2', [443.0, 452.0]], ['c16_3_4', [194.0, 266.0]], ['c11_2_4', [266.0, 302.0]], ['c12_2_1', [502.0, 513.0]], ['c5_3_1', [513.0, 539.0]], ['c7_1_2', [452.0, 498.0]], ['c18_3_5', [308.0, 396.0]], ['c16_4_5', [396.0, 461.0]], ['c9_2_4', [313.0, 389.0]], ['c15_3_5', [461.0, 530.0]], ['c14_1_3', [331.0, 426.0]], ['c2_1_1', [539.0, 582.0]], ['c13_2_3', [426.0, 500.0]], ['c19_4_4', [409.0, 498.0]], ['c10_4_4', [502.0, 549.0]], ['c17_2_3', [500.0, 513.0]], ['c13_3_2', [500.0, 510.0]], ['c15_4_3', [530.0, 579.0]], ['c1_3_3', [579.0, 628.0]], ['c8_2_2', [510.0, 556.0]], ['c17_3_2', [556.0, 577.0]], ['c12_3_2', [577.0, 605.0]], ['c4_1_2', [605.0, 686.0]], ['c2_2_2', [686.0, 761.0]], ['c13_4_4', [549.0, 638.0]], ['c8_3_1', [582.0, 614.0]], ['c7_2_1', [614.0, 675.0]], ['c20_2_2', [761.0, 768.0]], ['c10_5_5', [549.0, 639.0]], ['c3_1_2', [768.0, 859.0]], ['c9_3_3', [628.0, 713.0]], ['c5_4_4', [638.0, 659.0]], ['c19_5_5', [639.0, 713.0]], ['c1_4_4', [659.0, 721.0]], ['c14_2_1', [675.0, 774.0]], ['c11_3_1', [774.0, 785.0]], ['c4_2_1', [785.0, 856.0]], ['c6_3_5', [713.0, 761.0]], ['c9_4_2', [859.0, 899.0]], ['c20_3_3', [768.0, 844.0]], ['c12_4_4', [721.0, 767.0]], ['c12_5_5', [767.0, 797.0]], ['c2_3_4', [767.0, 836.0]], ['c8_4_4', [836.0, 855.0]], ['c11_4_5', [797.0, 853.0]], ['c1_5_5', [853.0, 897.0]], ['c17_4_4', [855.0, 944.0]], ['c3_2_1', [859.0, 898.0]], ['c14_3_2', [899.0, 951.0]], ['c7_3_3', [844.0, 876.0]], ['c13_5_5', [897.0, 930.0]], ['c18_4_3', [876.0, 924.0]], ['c3_3_3', [924.0, 1014.0]], ['c11_5_3', [1014.0, 1035.0]], ['c7_4_4', [944.0, 976.0]], ['c4_3_5', [930.0, 939.0]], ['c8_5_5', [939.0, 975.0]], ['c5_5_5', [975.0, 1047.0]], ['c16_5_3', [1035.0, 1064.0]], ['c7_5_5', [1047.0, 1077.0]], ['c14_4_4', [976.0, 1074.0]], ['c4_4_3', [1064.0, 1149.0]], ['c9_5_5', [1077.0, 1103.0]], ['c18_5_4', [1074.0, 1153.0]], ['c17_5_5', [1103.0, 1158.0]], ['c3_4_5', [1158.0, 1170.0]], ['c2_4_3', [1149.0, 1195.0]], ['c14_5_5', [1170.0, 1213.0]], ['c6_4_1', [898.0, 945.0]], ['c4_5_4', [1153.0, 1175.0]], ['c20_4_4', [1175.0, 1227.0]], ['c2_5_5', [1213.0, 1285.0]], ['c15_5_4', [1227.0, 1280.0]], ['c6_5_4', [1280.0, 1286.0]], ['c3_5_4', [1286.0, 1331.0]], ['c20_5_5', [1285.0, 1330.0]]]
#
# t_table = [[29,9,49,62,44],[43,75,69,46,72],[91,39,90,12,45],[81,71,9,85,22],[14,22,26,21,72],[84,52,48,47,6],
#            [46,61,32,32,30],[31,46,32,19,36],[76,76,85,40,26],[85,61,64,47,90],[78,36,11,56,21],[90,11,28,46,30],
#            [85,74,10,89,33],[95,99,52,98,43],[6,61,69,49,53],[2,95,72,65,29],[37,13,21,89,55],[86,74,88,48,79],
#            [69,51,11,89,74],[13,7,76,52,45]]
# m_table = [[1,2,3,4,5],[1,2,4,3,5],[2,1,3,5,4],[2,1,5,3,4],[3,2,1,4,5],[3,2,5,1,4],[2,1,3,4,5],[3,2,1,4,5],
#            [1,4,3,2,5],[2,3,1,4,5],[2,4,1,5,3],[3,1,2,4,5],[1,3,2,4,5],[3,1,2,4,5],[1,2,5,3,4],[2,1,4,5,3],
#            [1,3,2,4,5],[1,2,5,3,4],[2,3,1,4,5],[1,2,3,4,5]]

# from case_generated import jobs, machines, m_table, t_table
# jobs = 6
# machines = 10
# t_table = [[82, 91, 88, 72, 28, 29, 82, 99, 8, 81], [82, 51, 28, 3, 72, 9, 65, 29, 93, 8], [40, 48, 29, 16, 48, 20, 56, 40, 11, 71], [43, 67, 81, 45, 81, 99, 50, 89, 38, 60], [67, 26, 27, 78, 88, 43, 16, 53, 62, 15], [92, 11, 78, 13, 69, 54, 67, 75, 56, 68]]
# m_table=[[2, 7, 10, 6, 1, 9, 5, 8, 3, 4], [10, 4, 7, 6, 3, 9, 5, 1, 8, 2], [7, 3, 1, 2, 9, 4, 10, 6, 5, 8], [2, 9, 8, 1, 4, 7, 6, 10, 5, 3], [2, 1, 5, 10, 4, 7, 8, 3, 9, 6], [4, 6, 10, 3, 8, 5, 9, 1, 2, 7]]
# jobs = 6
# machines = 6
# t_table = [[10, 43, 18, 94, 42, 9], [64, 83, 49, 14, 89, 90], [62, 32, 1, 11, 3, 26], [4, 33, 5, 87, 88, 2], [93, 10, 66, 22, 51, 83], [1, 30, 26, 92, 46, 51]]
# m_table = [[2, 6, 1, 3, 5, 4], [6, 5, 1, 3, 4, 2], [4, 5, 3, 6, 2, 1], [2, 4, 5, 1, 3, 6], [4, 6, 3, 1, 5, 2], [2, 4, 6, 3, 1, 5]]
# jobs = 10
# machines = 6
# t_table = [[72, 14, 48, 3, 65, 55], [86, 1, 89, 33, 15, 6], [81, 51, 4, 85, 18, 80], [92, 35, 49, 26, 24, 90], [80, 58, 86, 20, 11, 83], [80, 88, 37, 79, 32, 57], [53, 25, 64, 19, 86, 14], [77, 15, 48, 16, 49, 79], [97, 58, 24, 81, 90, 94], [25, 85, 6, 57, 20, 24]]
# m_table = [[2, 5, 4, 6, 3, 1], [1, 3, 2, 5, 6, 4], [1, 3, 4, 5, 6, 2], [2, 4, 6, 1, 5, 3], [6, 5, 4, 1, 3, 2], [4, 5, 2, 3, 6, 1], [3, 4, 2, 1, 6, 5], [2, 5, 6, 3, 4, 1], [2, 4, 5, 1, 6, 3], [6, 3, 1, 5, 4, 2]]
# jobs = 10
# machines = 10
# #[['c6_1_2', [0.0, 55.0]], ['c10_1_5', [0.0, 30.0]], ['c4_1_10', [0.0, 35.0]], ['c10_2_1', [30.0, 33.0]], ['c9_1_4', [0.0, 86.0]], ['c2_1_9', [0.0, 45.0]], ['c1_1_6', [0.0, 21.0]], ['c1_2_1', [33.0, 52.0]], ['c8_1_7', [0.0, 72.0]], ['c4_2_8', [35.0, 55.0]], ['c1_3_10', [52.0, 118.0]], ['c1_4_2', [118.0, 156.0]], ['c9_2_7', [86.0, 173.0]], ['c4_3_9', [55.0, 82.0]], ['c5_1_3', [0.0, 64.0]], ['c10_3_10', [118.0, 170.0]], ['c7_1_9', [82.0, 128.0]], ['c5_2_10', [170.0, 178.0]], ['c3_1_5', [30.0, 50.0]], ['c8_2_4', [86.0, 148.0]], ['c2_2_8', [55.0, 128.0]], ['c3_2_10', [178.0, 244.0]], ['c4_4_5', [82.0, 145.0]], ['c4_5_3', [145.0, 185.0]], ['c6_2_7', [173.0, 196.0]], ['c2_3_6', [128.0, 202.0]], ['c9_3_9', [173.0, 231.0]], ['c7_2_4', [148.0, 205.0]], ['c3_3_3', [244.0, 265.0]], ['c1_5_8', [156.0, 221.0]], ['c7_3_10', [244.0, 261.0]], ['c5_3_5', [178.0, 208.0]], ['c2_4_1', [202.0, 227.0]], ['c8_3_2', [156.0, 185.0]], ['c4_6_6', [202.0, 254.0]], ['c10_4_2', [185.0, 220.0]], ['c2_5_2', [227.0, 229.0]], ['c1_6_7', [221.0, 242.0]], ['c8_4_5', [208.0, 263.0]], ['c4_7_7', [254.0, 309.0]], ['c5_4_2', [229.0, 283.0]], ['c3_4_2', [283.0, 319.0]], ['c6_3_6', [254.0, 289.0]], ['c9_4_8', [231.0, 297.0]], ['c10_5_7', [309.0, 377.0]], ['c7_4_7', [377.0, 382.0]], ['c8_5_10', [263.0, 283.0]], ['c5_5_8', [297.0, 396.0]], ['c2_6_5', [263.0, 358.0]], ['c5_6_7', [396.0, 492.0]], ['c6_4_10', [289.0, 355.0]], ['c4_8_2', [319.0, 341.0]], ['c1_7_9', [242.0, 313.0]], ['c8_6_1', [283.0, 333.0]], ['c6_5_4', [355.0, 381.0]], ['c9_5_3', [297.0, 388.0]], ['c3_5_1', [333.0, 425.0]], ['c7_5_5', [382.0, 425.0]], ['c9_6_6', [388.0, 434.0]], ['c6_6_1', [425.0, 450.0]], ['c8_7_3', [388.0, 485.0]], ['c6_7_5', [450.0, 522.0]], ['c3_6_6', [434.0, 529.0]], ['c8_8_9', [485.0, 517.0]], ['c10_6_8', [396.0, 442.0]], ['c3_7_7', [529.0, 603.0]], ['c1_8_4', [381.0, 421.0]], ['c7_6_2', [425.0, 438.0]], ['c7_7_6', [529.0, 555.0]], ['c9_7_10', [434.0, 490.0]], ['c4_9_4', [421.0, 484.0]], ['c8_9_8', [517.0, 527.0]], ['c10_7_3', [485.0, 549.0]], ['c5_7_1', [492.0, 590.0]], ['c9_8_2', [490.0, 510.0]], ['c10_8_9', [549.0, 575.0]], ['c2_7_10', [490.0, 589.0]], ['c3_8_9', [603.0, 635.0]], ['c5_8_6', [590.0, 649.0]], ['c10_9_4', [575.0, 643.0]], ['c9_9_5', [522.0, 608.0]], ['c6_8_9', [635.0, 695.0]], ['c7_8_8', [555.0, 579.0]], ['c1_9_3', [549.0, 627.0]], ['c2_8_3', [627.0, 726.0]], ['c6_9_8', [695.0, 761.0]], ['c3_9_4', [643.0, 724.0]], ['c1_10_5', [627.0, 720.0]], ['c10_10_6', [649.0, 693.0]], ['c7_9_3', [726.0, 742.0]], ['c8_10_6', [693.0, 707.0]], ['c9_10_1', [608.0, 629.0]], ['c5_9_4', [724.0, 736.0]], ['c4_10_1', [629.0, 710.0]], ['c2_9_4', [736.0, 800.0]], ['c3_10_8', [761.0, 763.0]], ['c6_10_3', [761.0, 789.0]], ['c7_10_1', [742.0, 754.0]], ['c5_10_9', [736.0, 782.0]], ['c2_10_7', [800.0, 819.0]]]
# t_table = [[21, 19, 66, 38, 65, 21, 71, 40, 78, 93], [45, 73, 74, 25, 2, 95, 99, 99, 64, 19], [20, 66, 21, 36, 92, 95, 74, 32, 81, 2], [35, 20, 27, 63, 40, 52, 55, 22, 63, 81], [64, 8, 30, 54, 99, 96, 98, 59, 12, 46], [55, 23, 35, 66, 26, 25, 72, 60, 66, 28], [46, 57, 17, 5, 43, 13, 26, 24, 16, 12], [72, 62, 29, 55, 20, 50, 97, 32, 10, 14], [86, 87, 58, 66, 91, 46, 56, 20, 86, 21], [30, 3, 52, 35, 68, 46, 64, 26, 68, 44]]
# m_table = [[6, 1, 10, 2, 8, 7, 9, 4, 3, 5], [9, 8, 6, 1, 2, 5, 10, 3, 4, 7], [5, 10, 3, 2, 1, 6, 7, 9, 4, 8], [10, 8, 9, 5, 3, 6, 7, 2, 4, 1], [3, 10, 5, 2, 8, 7, 1, 6, 4, 9], [2, 7, 6, 10, 4, 1, 5, 9, 8, 3], [9, 4, 10, 7, 5, 2, 6, 8, 3, 1], [7, 4, 2, 5, 10, 1, 3, 9, 8, 6], [4, 7, 9, 8, 3, 6, 10, 2, 5, 1], [5, 1, 10, 2, 7, 8, 3, 9, 4, 6]]
# jobs = 20
# machines = 6
# t_table = [[53, 4, 34, 59, 16, 98], [57, 33, 35, 19, 47, 12], [30, 93, 89, 66, 62, 80], [90, 10, 60, 54, 53, 31], [68, 92, 99, 11, 20, 50], [14, 89, 32, 91, 85, 10], [72, 71, 60, 11, 48, 78], [20, 82, 77, 60, 60, 93], [71, 45, 78, 64, 20, 28], [13, 42, 55, 54, 37, 53], [80, 37, 93, 94, 50, 66], [57, 10, 81, 3, 14, 68], [10, 64, 77, 87, 34, 3], [58, 11, 72, 47, 5, 83], [22, 29, 59, 47, 56, 73], [8, 30, 18, 23, 39, 45], [80, 16, 6, 87, 69, 20], [25, 11, 75, 62, 30, 4], [33, 50, 23, 50, 90, 9], [36, 75, 55, 7, 52, 46]]
# m_table = [[6, 2, 5, 3, 1, 4], [3, 5, 1, 6, 4, 2], [1, 5, 4, 3, 2, 6], [5, 3, 4, 1, 2, 6], [6, 5, 4, 2, 1, 3], [3, 6, 4, 5, 1, 2], [5, 6, 2, 1, 3, 4], [6, 2, 4, 3, 1, 5], [2, 1, 5, 6, 4, 3], [6, 4, 1, 2, 3, 5], [6, 2, 5, 3, 4, 1], [3, 5, 1, 4, 6, 2], [6, 5, 2, 1, 4, 3], [2, 1, 6, 3, 5, 4], [1, 4, 6, 3, 5, 2], [4, 6, 1, 3, 2, 5], [4, 2, 3, 6, 5, 1], [3, 4, 2, 1, 5, 6], [2, 5, 1, 6, 4, 3], [5, 3, 4, 1, 6, 2]]
# jobs = 20
# machines = 10
#
# t_table = [[18, 20, 59, 91, 77, 16, 24, 97, 40, 77], [87, 37, 60, 88, 94, 14, 72, 59, 76, 77], [47, 29, 20, 35, 5, 25, 17, 45, 74, 8], [46, 20, 63, 32, 72, 86, 13, 79, 84, 30], [15, 6, 52, 60, 56, 64, 62, 76, 73, 4], [7, 3, 29, 63, 53, 5, 18, 63, 62, 57], [6, 27, 87, 72, 24, 75, 11, 66, 39, 20], [73, 85, 99, 11, 15, 14, 98, 21, 25, 69], [67, 6, 57, 98, 79, 37, 56, 85, 92, 64], [62, 4, 83, 35, 18, 46, 8, 37, 48, 8], [23, 83, 31, 96, 69, 29, 47, 18, 35, 96], [75, 18, 14, 38, 45, 60, 18, 61, 94, 32], [52, 80, 24, 22, 58, 86, 21, 5, 98, 42], [95, 7, 95, 55, 98, 67, 75, 40, 72, 33], [60, 46, 3, 85, 16, 22, 74, 35, 51, 3], [64, 35, 49, 89, 76, 48, 26, 67, 29, 16], [17, 86, 89, 84, 1, 74, 73, 99, 12, 3], [62, 19, 88, 37, 87, 5, 80, 8, 84, 39], [34, 61, 2, 81, 29, 29, 24, 98, 60, 69], [14, 69, 3, 18, 44, 10, 47, 75, 73, 37]]
# m_table = [[1, 9, 3, 6, 8, 4, 10, 7, 5, 2], [9, 2, 1, 8, 3, 5, 4, 6, 10, 7], [8, 4, 2, 5, 10, 9, 7, 1, 3, 6], [6, 4, 5, 10, 3, 7, 8, 2, 9, 1], [2, 4, 3, 8, 5, 10, 6, 1, 9, 7], [7, 10, 3, 1, 6, 8, 9, 2, 5, 4], [1, 6, 3, 2, 9, 7, 10, 4, 5, 8], [1, 9, 8, 4, 5, 6, 3, 7, 2, 10], [10, 6, 7, 4, 3, 1, 8, 9, 2, 5], [7, 8, 9, 4, 1, 10, 6, 3, 2, 5], [10, 1, 5, 2, 3, 7, 4, 8, 6, 9], [6, 7, 4, 2, 5, 3, 1, 8, 9, 10], [2, 1, 6, 8, 7, 5, 4, 3, 10, 9], [9, 7, 1, 10, 8, 3, 5, 2, 4, 6], [4, 7, 9, 3, 10, 5, 6, 8, 1, 2], [8, 10, 3, 5, 2, 1, 6, 9, 7, 4], [7, 10, 5, 8, 6, 2, 1, 4, 9, 3], [1, 9, 3, 2, 4, 7, 10, 6, 5, 8], [4, 7, 5, 6, 2, 3, 8, 10, 9, 1], [5, 6, 8, 2, 3, 4, 9, 7, 1, 10]]

'''
# m_table = []
# for i in range(jobs):
#     a = list(range(1, 11))
#     random.shuffle(a)
#     m_table.append(a)  # 加工位置列表'''


# 处理以上数据为染色体形式，一行只含有工序不含机器
def com_tr(t_table):
    topo_order = []
    for j_num, o_num in enumerate(t_table):  # 根据时间表获取工件数索引和其工序列表
        # topo_order.append((np.ones([1, len(o_num)], int)*(j_num+1)).tolist())  # 将工件数转化为数值列表，长度为工序数
        topo_order = topo_order+(np.ones([1, len(o_num)], int) * (j_num + 1)).tolist()
        # topo_order.append(np.ones([1, len(o_num)], int) * (j_num + 1))
        # print([j_num,o_num])
    # print(topo_order)
    combin = []
    for li in topo_order:  # 将列表中各工件独立列表加起来
        combin = combin+li

    random.shuffle(combin)  # 随机打乱列表中元素
    return combin
# print(combin)


# order = []
# for j_num, o_num in enumerate(t_table):
#     for i in range(j_num):
#         order.append(i+1)

"""根据排序计算完工时间"""
'''1.首先对工序和机器以及时间分别初始化P，M，T'''
# P,M,T=[],[],[]
# Cmax = 0
# for i in range(len(combin)):  # 对合并后的列表进行遍历，
#     job = combin[i]
#     P.append(combin[i]*10+combin.count(job))  # 染色体上编码和工序对应
#     M.append(m_table[job-1][combin.count(job)-1])  # 染色体上每台机器
#     T.append(t_table[job-1][combin.count(job)-1])  # 每条染色体上对应工序的加工时间

# C = []
# for j in range(len(combin)):
#     x = int(P[j]/10)  # 工件号
#     y = P[j] % 10  # 工序号
#     if y == 1:
#         C
# 定义工作节点类 name为Cij:第i个工件在第j个机器上加工，StartTime为开始时间，LoadTime为加工时间，EndTime为加工结束时间
class Cij:
    def __init__(self, name, StartTime, LoadTime):
        self.name = name
        self.StartTime = StartTime
        self.LoadTime = LoadTime
        self.EndTime = StartTime + LoadTime

# 定义最大流程时间函数
def c_max(combin):  # n根据下文应该是单条染色体
    # 循环赋值函数，将工件数，机器数与加工时间进行绑定
    # enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列
    for i in range(len(combin)):  # i为工件索引
        job = combin[i]  # 工件
        no_job = combin[:i+1].count(job)  # 工序
        machine = m_table[job-1][no_job-1]  # 机器号
        loadtime = t_table[job-1][no_job-1]  # 该工序加工时间
        locals()['c{}_{}_{}'.format(job, no_job, machine)] = Cij(name='c{}_{}_{}'.format(job, no_job, machine),
                                                                  StartTime=0, LoadTime=loadtime, )
            # "{1} {0} {1}".format("hello", "world")
            # 'world hello world'
    # Python的locals()函数会以dict类型  返回  当前位置的全部局部变量。
    # 加工流程记录表。
    load_time_tables = []
    # M_time = np.zeros(max(max(m_table)))  # 初始化所有机器当前加工时刻为0
    M_time=np.zeros(machines)
    for i in range(len(combin)):  # combin为数值编号，代表工件及其工序数量
        job = combin[i]  # 工件号
        no_job = combin[:i+1].count(job)  # 工序
        machine = m_table[job-1][no_job-1]  # 注意python索引
        if no_job == 1:  # 工序号，开始时间为机器完成上个工件任务的时间或0
            locals()['c{}_{}_{}'.format(job, no_job, machine)].StartTime = M_time[machine-1]  # 第一道工序开始时间为本机器此时时刻或0
            # locals()['c{}_{}_{}'.format(job, no_job, machine)].EndTime = locals()['c{}_{}_{}'.format(job, no_job, machine)].StartTime + \
            #                                                   locals()['c{}_{}_{}'.format(job, no_job, machine)].LoadTime
            # M_time[machine-1] = locals()['c{}_{}_{}'.format(job, no_job, machine)].EndTime
            # load_time_tables.append([locals()['c{}_{}_{}'.format(job, no_job, machine)].name, [
            #     locals()['c{}_{}_{}'.format(job, no_job, machine)].StartTime,
            #     locals()['c{}_{}_{}'.format(job, no_job, machine)].EndTime]])

        else:
            locals()['c{}_{}_{}'.format(job, no_job, machine)].StartTime = max(
                M_time[machine-1],  # 该工序所在加工位置机器的时间
                locals()['c{}_{}_{}'.format(job, no_job-1, m_table[job-1][no_job-2])].EndTime)  # 该工序的前道工序的完工时间
        locals()['c{}_{}_{}'.format(job, no_job, machine)].EndTime = locals()['c{}_{}_{}'.format(job, no_job, machine)].StartTime + \
                                                          locals()['c{}_{}_{}'.format(job, no_job, machine)].LoadTime
        M_time[machine - 1] = locals()['c{}_{}_{}'.format(job, no_job, machine)].EndTime
        load_time_tables.append([locals()['c{}_{}_{}'.format(job, no_job, machine)].name, [
            locals()['c{}_{}_{}'.format(job, no_job, machine)].StartTime,
            locals()['c{}_{}_{}'.format(job, no_job, machine)].EndTime]])
        T=[]
        for i in load_time_tables:
            T.append(i[-1][-1])

    return load_time_tables, max(T)  # load_time_tables 代表所有工件每个工序加工位置及其开始和结束加工时间

# c_max(combin)
# print(load_time_tables)
# load_time_tables, load_time_tables[-1][-1][-1] = c_max(combin)


# 种群初始化
def init_population(pop_size, chrom):
    pop = []
    for i in range(pop_size):
        c = copy.deepcopy(chrom)
        random.shuffle(c)
        pop.append(c)
    return pop


# 计算适应度
def fitness(combin):
    return 1 / (c_max(combin)[1])


class node:
    def __init__(self, state):
        self.state = state
        self.load_table = c_max(state)[0]  # 求出染色体上每个工序的负载表
        self.makespan = c_max(state)[1]  # 染色体的时间跨度
        self.fitness = fitness(state)

# node实现了完工时间的求解和适应度值

'''
出问题的地方,交叉错误
'''
def two_points_cross(chro1, chro2):
    # 不改变原始数据进行操作
    chro1_1 = copy.deepcopy(chro1)
    chro2_1 = copy.deepcopy(chro2)
    # 交叉位置，point1<point2
    point1 = random.randint(0, len(chro1_1))
    point2 = random.randint(0, len(chro1_1))
    while point1 > point2 or point1 == point2:
        point1 = random.randint(0, len(chro1_1))
        point2 = random.randint(0, len(chro1_1))

    # 记录交叉片段
    frag1 = chro1[point1:point2]
    frag2 = chro2[point1:point2]
    random.shuffle(frag1)
    random.shuffle(frag2)
    # 交叉
    chro1_1[point1:point2], chro2_1[point1:point2] = chro2_1[point1:point2], chro1_1[point1:point2]

    child1 = chro1_1[:point1] + frag1 + chro1_1[point2:]
    child2 = chro2_1[:point1] + frag2 + chro2_1[point2:]

    return child1, child2


# 交换变异
def gene_exchange(n):
    point1 = random.randint(0, len(n) - 1)
    point2 = random.randint(0, len(n) - 1)
    while point1 == point2 or point1 > point2:
        point1 = random.randint(0, len(n) - 1)
        point2 = random.randint(0, len(n) - 1)
    n[point1], n[point2] = n[point2], n[point1]
    return n


# 插入变异
def gene_insertion(n):
    point1 = random.randint(0, len(n) - 1)
    point2 = random.randint(0, len(n) - 1)
    while point1 == point2:
        point1 = random.randint(0, len(n) - 1)
        point2 = random.randint(0, len(n) - 1)
    x = n.pop(point1)
    n.insert(point2, x)
    return n


# 局部逆序变异
def gene_reverse(n):
    point1 = random.randint(0, len(n) - 1)
    point2 = random.randint(0, len(n) - 1)
    while point1 == point2 or point1 > point2:
        point1 = random.randint(0, len(n) - 1)
        point2 = random.randint(0, len(n) - 1)
    ls_res = n[point1:point2]
    ls_res.reverse()
    l1 = n[:point1]
    l2 = n[point2:]
    n_res_end = l1 + ls_res + l2
    return n_res_end

def select(population):
    pop_fit=[]
    for i in population:
        pop_fit.append(fitness(i))
    best_chrom = min(pop_fit)

    return best_chrom
# 进行遗传算法实现
pop_size = 20  # 种群规模
c_r = 0.85  # 交叉概率
variation_rate = 0.05  # 变异概率
iters = 500  # 迭代次数

target_points = [1,2,3]
# 开始求解
combin = com_tr(t_table)
population = init_population(pop_size, combin)
solution_list = [node(i) for i in population]
solution_list.sort(key=lambda x: x.makespan)
best_fit, fit_ave = [], []
pops = [i.state for i in solution_list]  # 相当于把solution_list的染色体复制到pops中  pops = copy.deepcopy(population)
f_list = [i.makespan for i in solution_list]  # 计算该种群各适应度
Xb, fb, fave = pops[0], f_list[0], np.mean(f_list)  # 最佳个体与平均适应度
best_fit.append(fb)
fit_ave.append(fave)
# 开始循环
start = datetime.datetime.now()
# pop_new = copy.deepcopy(pops)
for i in range(iters):
    pop_new = copy.deepcopy(pops)
    if i % 10 == 0:
        print('第{}次进化后的最优加工时间为{}'.format(i, fb))  # 首个染色体的结束时间, solution_list含makespan函数和方法
    pop_children1 = pop_new[1::2]  # 偶数解，偶数组成的种群
    pop_children2 = pop_new[::2]  # 奇数解
    if c_r>random.random():
        # PMX两点交叉变异
        for i in range(len(pop_children1)):
            pop_children1[i], pop_children2[i] = two_points_cross(pop_children1[i], pop_children2[i])
        # 交叉后的子种群
        pop_new = pop_children1 + pop_children2
    # 变异
    if variation_rate>random.random():
        for i in pop_new:
            mutation_rate = random.random()
            target = random.choice(target_points)  # ???三种编译策略
            # if mutation_rate > variation_rate:
            if target == 1:
                pop_new[pop_new.index(i)] = gene_exchange(i)
            elif target == 2:
                pop_new[pop_new.index(i)] = gene_insertion(i)
            else:
                pop_new[pop_new.index(i)] = gene_reverse(i)
    # print(cross_population)
    cross_solution = [node(i) for i in pop_new]
    solution_list = solution_list + cross_solution
    solution_list.sort(key=lambda x: x.makespan)  # 排序后首个染色体为最佳解
    del solution_list[pop_size:]
    pops = [i.state for i in solution_list]  # 相当于把solution_list的染色体复制到pops中  pops = copy.deepcopy(population)
    f_list = [i.makespan for i in solution_list]  # 计算该种群各适应度
    Xb, fb, fave = pops[0], f_list[0], np.mean(f_list)  # 最佳个体与平均适应度
    best_fit.append(fb)
    fit_ave.append(fave)
    # 选择
    P_list = np.array([fitness(c) for c in pops])
    for p in range(pop_size):
        P_list[p] = f_list[p] / sum(f_list)
    P_wheel = P_list.cumsum()
    for s in range(pop_size):
        if P_wheel[s] < random.random():
            c = copy.deepcopy(pops[s])
            random.shuffle(c)  # 概率低的个体随机初始化
            pops[s] = c
print('进化完成，最终最优加工时间为：', solution_list[0].makespan)
end = datetime.datetime.now()
print('耗时{}'.format(end - start))
print(solution_list[0].load_table)



# config = {
#             "font.family": 'serif',
#             "font.size": 20,
#             "mathtext.fontset": 'stix',
#             "font.serif": ['SimSun'],
#          }
# rcParams.update(config)
# plt.figure(1)
# # 绘制甘特图
# def color():# 甘特图颜色生成函数
#     color_ls = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
#     col = ''
#     for i in range(6):  # 6种颜色数字字母组合
#         col += random.choice(color_ls)
#     return '#'+col
# colors = [color() for i in range(len(t_table))]  # 甘特图颜色列表,每个工件一个颜色
# for i in solution_list[0].load_table:  # 对最佳染色体进行遍历，做出甘特图
#     # print(i)  # 每个工件
#     y = eval(re.findall('_(\d+)', i[0])[1])  # 正则表达式匹配工件数,找到_后面内部整数个数，机器号=工序号
#     """
#     i = ['c24_9', [1715, 1736]]  # 9
#     # \d匹配任何十进制数，它相当于类[0-9]
#     # \d+如果需要匹配一位或者多位数的数字时用
#     a = re.search("(a4)+", "a4a4a4a4a4dg4g654gb")   # 匹配一个或多个a4
#     a = re.findall(r"你|好", "a4a4a你4aabc4a4dgg好dg4g654g")   #|或，或就是前后其中一个符合就匹配  #打印出 ['你', '好']
#     """
#     # eval() 函数用来执行一个字符串表达式，并返回表达式的值。
#     label=re.findall(r'(\d*?)_', i[0])[0]  # 正则表达式匹配机器数
#     plt.barh(y=y, left=i[1][0], width=i[1][-1] - i[1][0], height=0.5, color=colors[eval(label) - 1],
#              label=f'job{label}')
# plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
# plt.rcParams['font.serif'] = ['KaiTi']
# plt.rcParams['axes.unicode_minus'] = False
# plt.title('jsp最优调度甘特图')
# plt.xlabel('加工时间')
# plt.ylabel('加工机器')
# handles, labels = plt.gca().get_legend_handles_labels()  # 标签去重
# from collections import OrderedDict  # ：字典的子类，保留了他们被添加的顺序
# by_label = OrderedDict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys())
# config = {
#             "font.family": 'serif',
#             "font.size": 20,
#             "mathtext.fontset": 'stix',
#             "font.serif": ['SimSun'],
#          }
# rcParams.update(config)
# plt.figure(2)
# p1, = plt.plot(best_fit[:], label='best_fit')
# p2, = plt.plot(fit_ave[:], label='fit_ave', linestyle='--')
# l1 = plt.legend([p1, p2], ["best_fit", "fit_ave"], loc='upper right')
# # l1 = plt.legend([p2, p1], ["line 2", "line 1"], loc='upper left')
# plt.title('variation of makespan with GA')
# plt.xlabel('iteration')
# plt.ylabel('working time')
# plt.show()
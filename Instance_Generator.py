# -*- coding: utf-8 -*-
# @Time : 2021/11/3 15:33
# @Author : hhq
# @File : DQN_FJSSP.py
import random
import numpy as np

Total_Machine = [10, 20, 30, 40, 50]  # 全部机器
Initial_Job_num = 20  # 初始工件个数
Job_insert = [50, 100, 200]  # 工件新到达个数
DDT = [0.5, 1.0, 1.5]  # 工件紧急程度
E_ave = [50, 100, 200]  # 指数分布  两次连续作业插入间隔之间的时间指数分布平均值为100。


'''1.1 算例生成（Instance_Generator）'''
def Instance_Generator(M_num, E_ave, New_insert, DDT):
    '''
    :param M_num: Machine Number
    :param E_ave: exponetional distribution
    :param New_insert: New Job insert
    :param DDT:Due date tightness
    :return: Processing time,A:New Job arrive time,
                                D:Deliver time,
                                M_num: Machine Number,
                                Op_num: Operation Number,
                                J_num:Job NUMBER
    '''
    Initial_Job_num = 5
    J_num = Initial_Job_num + New_insert  # 工件总数
    Op_num = [random.randint(1, 5) for i in range(J_num)]  # 随机选取整数，工序数量
    Processing_time = []
    for i in range(J_num):  # 总共加工数量
        Job_i = []  # 工件i的加工时间初始化为-1或1~50之间的随机数
        for j in range(Op_num[i]):  # 每个工件的工序数遍历
            k = random.randint(1, M_num - 2)  # 一个在1-（机器数-2）之间的随机整数。前闭后闭
            T = list(range(M_num))  # 机器索引列表
            random.shuffle(T)  # 打乱上述顺序
            T = T[:k + 1]  # 取前k+1个索引,k可能为4，5.。。
            # 相当于选出可用机器
            O_i = list(np.ones(M_num) * (-1))  # 工序在每台机器加工时间初始化为-1
            for M_i in range(M_num):  # 每台机器加工时间遍历
                if M_i in T:  # T中的索引遍历
                    O_i[M_i] = random.randint(1, 50)  # 加工时间随机化
            Job_i.append(O_i)  # 工序在可用机器加工时间随机值
        Processing_time.append(Job_i)  # 工件的加工时间赋值
        '''每个工件的每个工序在任意几个机器上的加工时间随机初始化'''

    A1 = [0 for i in range(Initial_Job_num)]  # 初始各工件到达时间间隔初始0
    A = np.random.exponential(E_ave, size=New_insert)  # 指数分布列表，大小为插入订单数 两个订单间隔出现的时间期望为E_ave
    A = [int(A[i]) for i in range(len(A))]  # New Insert Job arrive time，到达时间整数
    A1.extend(A)  # A1到达时间

    T_ijave = []
    for i in range(J_num):
        Tad = []
        for j in range(Op_num[i]):
            T_ijk = [k for k in Processing_time[i][j] if k != -1]  # 可选机器上的加工时间列表
            Tad.append(sum(T_ijk) / len(T_ijk))  # 该工序平均需要加工时间
        T_ijave.append(sum(Tad))  # 每个工件的所有工序平均加工时间，类似于真实加工时间列表

    D1 = [int(T_ijave[i] * DDT) for i in range(Initial_Job_num)]  # 初始工件的紧急程度
    D = [int(A1[i] + T_ijave[i] * DDT) for i in range(Initial_Job_num, J_num)]
    D1.extend(D)  # 到达工件的紧急程度
    O_num = sum(Op_num)  # 所有工序数量
    J = dict(enumerate(Op_num))  # 工件索引：工序数

    return Processing_time, A1, D1, M_num, Op_num, J, O_num, J_num

# 生成各工序加工时间、个工件到达时间间隔、所有工件的紧急程度、机器数、工序数、工件与工序数对应字典、工序总数、工件总数
# Processing_time, A, D, M_num, Op_num, J, O_num, J_num = Instance_Generator(10, 50, 10, 1.5)
# T_ijave = []
# for i in range(J_num):
#     Tad = []
#     for j in range(Op_num[i]):
#         T_ijk = [k for k in Processing_time[i][j] if k != -1]  # 可选机器上的加工时间列表
#         Tad.append(sum(T_ijk) / len(T_ijk))  # 该工序平均需要加工时间
#     T_ijave.append(sum(Tad))  # 每个工件的所有工序平均加工时间，类似于真实加工时间列表
# print(T_ijave)
# print(A)
# print(D)
A = [0, 0, 0, 0, 0, 15, 15, 50, 15, 123, 14, 206, 17, 93, 44]
D = [104, 183, 49, 178, 74, 178, 140, 198, 202, 161, 108, 299, 240, 241, 115]
J = {0: 3, 1: 5, 2: 1, 3: 5, 4: 2, 5: 5, 6: 3, 7: 4, 8: 5, 9: 1, 10: 3, 11: 3, 12: 5, 13: 4, 14: 2}
Op_num = [3, 5, 1, 5, 2, 5, 3, 4, 5, 1, 3, 3, 5, 4, 2]
Processing_time = [[[-1.0, -1.0, 6, -1.0, 10, 1, 30, -1.0, -1.0, -1.0],
                    [50, -1.0, -1.0, -1.0, -1.0, -1.0, 17, 37, -1.0, -1.0],
                    [47, -1.0, 32, 11, 6, 12, 13, -1.0, 50, 17]],
                   [[-1.0, -1.0, -1.0, -1.0, -1.0, 34, -1.0, -1.0, 32, 13],
                    [-1.0, -1.0, -1.0, -1.0, -1.0, 2, -1.0, 23, -1.0, 50],
                    [-1.0, -1.0, 15, -1.0, -1.0, 34, 40, 9, -1.0, -1.0],
                    [36, 46, -1.0, -1.0, -1.0, 15, -1.0, 10, -1.0, -1.0],
                    [27, 26, -1.0, -1.0, -1.0, 15, -1.0, -1.0, -1.0, 10]],
                   [[-1.0, -1.0, 43, 46, -1.0, -1.0, -1.0, -1.0, -1.0, 9]],
                   [[19, 28, -1.0, -1.0, -1.0, 32, 37, -1.0, -1.0, 17],
                    [42, 19, 25, 8, 46, -1.0, 5, -1.0, -1.0, 32],
                    [15, 19, 40, 2, 17, -1.0, 8, 16, 31, 25],
                    [29, 7, 32, -1.0, 26, -1.0, 38, -1.0, -1.0, -1.0],
                    [49, -1.0, 6, 31, -1.0, -1.0, 17, -1.0, 14, 13]],
                   [[-1.0, 44, -1.0, 32, -1.0, -1.0, 5, -1.0, -1.0, -1.0],
                    [-1.0, -1.0, 35, -1.0, 19, -1.0, -1.0, 13, -1.0, -1.0]],
                   [[-1.0, -1.0, 18, -1.0, 34, -1.0, 21, 29, -1.0, 38],
                    [-1.0, -1.0, -1.0, 11, 20, -1.0, -1.0, 10, -1.0, -1.0],
                    [-1.0, -1.0, -1.0, 31, -1.0, 27, 22, -1.0, 7, 21],
                    [4, 20, 26, 17, -1.0, -1.0, 24, 33, 17, 21],
                    [44, 11, 3, -1.0, -1.0, 18, -1.0, -1.0, 50, -1.0]],
                   [[-1.0, 31, 4, 39, -1.0, 20, 26, 7, -1.0, 43],
                    [-1.0, 24, -1.0, -1.0, 35, 43, -1.0, -1.0, -1.0, -1.0],
                    [14, 20, 46, 36, 24, -1.0, 12, 38, 9, 28]],
                   [[33, -1.0, -1.0, 33, 5, 50, -1.0, 34, -1.0, 10],
                    [-1.0, -1.0, -1.0, 40, -1.0, 33, -1.0, 18, 29, -1.0],
                    [-1.0, 2, 24, 19, -1.0, -1.0, 1, -1.0, 15, -1.0],
                    [-1.0, -1.0, 26, -1.0, -1.0, -1.0, 32, -1.0, -1.0, -1.0]],
                   [[49, -1.0, 46, 44, -1.0, -1.0, 12, -1.0, 15, 37],
                    [16, 23, 5, -1.0, 23, -1.0, 19, -1.0, 32, -1.0],
                    [49, 28, 36, 3, -1.0, 35, 20, -1.0, 5, 23],
                    [6, 8, -1.0, 18, 11, -1.0, 8, 43, -1.0, -1.0],
                    [32, 46, 21, -1.0, 23, 23, 44, 18, 42, -1.0]],
                   [[32, 29, 8, -1.0, 32, -1.0, -1.0, 4, -1.0, 47]],
                   [[32, 20, 1, 2, 6, 34, -1.0, 44, -1.0, 7],
                    [-1.0, -1.0, -1.0, -1.0, 1, -1.0, 1, -1.0, 39, 39],
                    [36, -1.0, 8, -1.0, -1.0, 34, -1.0, -1.0, 22, -1.0]],
                   [[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 19, 4, -1.0, 31],
                    [-1.0, 6, 37, 50, 14, 18, -1.0, 47, 16, 5],
                    [11, -1.0, -1.0, -1.0, 7, -1.0, 42, -1.0, -1.0, -1.0]],
                   [[16, -1.0, -1.0, 43, 39, -1.0, 43, 7, -1.0, -1.0],
                    [11, 11, 33, -1.0, 34, 38, 19, 8, 41, 27],
                    [-1.0, 46, 2, -1.0, 43, 36, 12, -1.0, -1.0, -1.0],
                    [-1.0, 33, -1.0, 44, 29, -1.0, -1.0, -1.0, 37, -1.0],
                    [-1.0, 45, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 17, -1.0]],
                   [[-1.0, -1.0, -1.0, 42, 1, -1.0, -1.0, 35, 21, 30],
                    [22, -1.0, -1.0, 1, 34, 32, 34, 24, -1.0, -1.0],
                    [-1.0, 7, 41, 4, 38, 26, -1.0, -1.0, 37, -1.0],
                    [-1.0, 29, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 17]],
                   [[33, -1.0, 7, 9, -1.0, 45, 36, 12, 8, -1.0],
                    [47, -1.0, -1.0, -1.0, -1.0, 10, -1.0, 41, -1.0, 8]]]
J_num = 15
M_num = 10
O_num = 51
